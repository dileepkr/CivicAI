[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "civicai-comprehensive"
version = "0.1.0"
description = "Comprehensive Multi-Agent Civic Policy Analysis, Discovery and Engagement Platform"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "CivicAI Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dependencies = [
    # Core CrewAI and policy analysis
    "crewai>=0.28.0",
    "google-generativeai>=0.8.0",
    "langchain-google-genai>=0.1.0",
    "nltk>=3.8.0",
    "spacy>=3.7.0",
    "transformers>=4.30.0",
    "weave>=0.51.56",
    # Policy discovery with Exa API
    "exa-py>=1.0.9",
    # FastAPI and web components
    "fastapi>=0.104.1,<1.0.0",
    "uvicorn>=0.24.0,<1.0.0",
    "websockets>=12.0,<13.0.0",
    "python-multipart>=0.0.6,<1.0.0",
    "aiofiles>=23.2.1,<24.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    # Data processing and utilities
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.6.1,<3.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    "httpx>=0.25.0",
    "python-dateutil>=2.8.0",
    "structlog>=23.1.0",
    # Development tools
    "ruff>=0.12.3",
    "crewai-tools>=0.51.1",
    "pyyaml>=6.0.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "ipykernel>=6.25.0",
]
all = [
    "civicai-comprehensive[dev,docs,jupyter]"
]

[project.urls]
Homepage = "https://github.com/civicai/policy-discovery"
Repository = "https://github.com/civicai/policy-discovery"
Documentation = "https://civicai.github.io/policy-discovery"
Issues = "https://github.com/civicai/policy-discovery/issues"

[project.scripts]
# Policy discovery CLI
policy-discovery = "policy_discovery.cli:main"
# Dynamic crew system
dynamic_crew = "src.dynamic_crew.main:run"
run_crew = "src.dynamic_crew.main:run"
train = "src.dynamic_crew.main:train"
replay = "src.dynamic_crew.main:replay"
test = "src.dynamic_crew.main:test"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.5.0",
]

# Additional UV configuration merged with dev-dependencies above

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
per-file-ignores = {"__init__.py" = ["F401"]}

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "exa_py.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["policy_discovery", "src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.crewai]
type = "crew"
